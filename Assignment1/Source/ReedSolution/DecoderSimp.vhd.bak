--------------------------------------------------------------
--------------------------------------------------------------
--                                                          --
-- This VHDL file has been generated by the verilog2vhdl    --
-- tool.                                                    --
-- Contact help@edautils.com  for support/info.--
--                                                          --
--                                                          --
--------------------------------------------------------------
--------------------------------------------------------------
--
--
-- Assumptions: 
--         (1) All the parameters are of type INTEGER, and hence the translated generics are of this type
--
--
-- Generated by : apache on 11/19/22 1:34 PM
--
--
library ieee;
use ieee.std_logic_1164.all;
package vl2vh_common_pack is 
    type vl2vh_memory_type is      array  ( natural range <> , natural range <>  )  of std_logic ;
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic;  constant falseval : std_logic)  return std_logic; 
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic_vector;  constant falseval : std_logic_vector)  return std_logic_vector; 
end package; 




package body vl2vh_common_pack is 
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic;  constant falseval : std_logic)  return std_logic is 
    begin
        if ( cond ) then 
             return trueval;
        else 
             return falseval;
        end if;
    end;
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic_vector;  constant falseval : std_logic_vector)  return std_logic_vector is 
    begin
        if ( cond ) then 
             return trueval;
        else 
             return falseval;
        end if;
    end;
end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity DIG_Add is 
generic (
        Bits : INTEGER := 1 
    );
     port (
        a :  in std_logic_vector( ( Bits - 1  )  downto 0  );
        b :  in std_logic_vector( ( Bits - 1  )  downto 0  );
        c_i :  in std_logic;
        s :  out std_logic_vector( ( Bits - 1  )  downto 0  );
        c_o :  out std_logic
    );
end entity; 


architecture rtl of DIG_Add is 
    signal temp : std_logic_vector( Bits downto 0  );
    begin 
        temp <= ( ( a + b )  + c_i ) ;
        s <= temp(( Bits - 1  )  downto 0 );
        c_o <= temp(Bits);
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity DecoderSimp is 
generic (
        Bits : INTEGER := 1 
    );
     port (
        y7 :  in std_logic;
        y6 :  in std_logic;
        y5 :  in std_logic;
        y4 :  in std_logic;
        y3 :  in std_logic;
        y2 :  in std_logic;
        y1 :  in std_logic;
        y0 :  in std_logic;
        \m'0  :  out std_logic;
        \m'1  :  out std_logic;
        \m'2  :  out std_logic;
        \m'3  :  out std_logic;
        Valid :  out std_logic;
        \2E  :  out std_logic;
        \1E  :  out std_logic
    );
end entity; 


architecture rtl of DecoderSimp is 
    signal \m'0_temp  : std_logic;
    signal \m'2_temp  : std_logic;
    signal \m'1_temp  : std_logic;
    signal s0 : std_logic;
    signal s1 : std_logic;
    signal s2 : std_logic;
    signal s3 : std_logic;
    signal s4 : std_logic;
    signal s5 : std_logic;
    signal s6 : std_logic;
    signal s7 : std_logic;
    signal s8 : std_logic;
    signal s9 : std_logic;
    signal s10 : std_logic;
    signal s11 : std_logic;
    signal s12 : std_logic;
    signal s13 : std_logic;
    signal s14 : std_logic;
    signal s15 : std_logic;
    signal s16 : std_logic;
    signal s17 : std_logic;
    signal s18 : std_logic;
    signal s19 : std_logic;
    signal s20 : std_logic;
    signal s21 : std_logic;
    signal s22 : std_logic;
    signal s23 : std_logic;
    signal s24 : std_logic;
    signal s25 : std_logic;
    signal s26 : std_logic;
    signal s27 : std_logic;
    signal s28 : std_logic;
    signal s29 : std_logic;
    signal s30 : std_logic;
    signal s31 : std_logic;
    signal Valid_temp : std_logic;
    signal \1E_temp  : std_logic;
    component DIG_Add is 
         generic (
            Bits : INTEGER := 1 
        );
         port (
            a :  in std_logic_vector( ( Bits - 1  )  downto 0  );
            b :  in std_logic_vector( ( Bits - 1  )  downto 0  );
            c_i :  in std_logic;
            s :  out std_logic_vector( ( Bits - 1  )  downto 0  );
            c_o :  out std_logic
        );
    end component; 
    begin 
        \m'0_temp  <= ( ( ( y7 xor y6 )  and ( y3 xor y2 )  )  or ( ( y5 xor y4 )  and ( y1 xor y0 )  )  ) ;
        \m'2_temp  <= ( ( ( y7 xor y3 )  and ( y5 xor y1 )  )  or ( ( y6 xor y2 )  and ( y4 xor y0 )  )  ) ;
        \m'1_temp  <= ( ( ( y7 xor y5 )  and ( y3 xor y1 )  )  or ( ( y6 xor y4 )  and ( y2 xor y0 )  )  ) ;
        s0 <= ( '1' and \m'0_temp  ) ;
        s1 <= ( '1' and \m'1_temp  ) ;
        s2 <= ( '1' and \m'2_temp  ) ;
        s3 <= ( y1 xor s0 ) ;
        s4 <= ( ( y3 xor s0 )  xor s1 ) ;
        s5 <= ( y2 xor s1 ) ;
        s6 <= ( ( y5 xor s0 )  xor s2 ) ;
        s7 <= ( y4 xor s2 ) ;
        s8 <= ( ( y6 xor s1 )  xor s2 ) ;
        s9 <= ( ( ( y7 xor s0 )  xor s1 )  xor s2 ) ;
        DIG_Add_i0 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s9,
                b => '0',
                c_i => s8,
                c_o => s11,
                s => s10
                );
        DIG_Add_i1 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s6,
                b => '0',
                c_i => s7,
                c_o => s13,
                s => s12
                );
        DIG_Add_i2 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s4,
                b => '0',
                c_i => s5,
                c_o => s15,
                s => s14
                );
        DIG_Add_i3 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s3,
                b => '0',
                c_i => y0,
                c_o => s17,
                s => s16
                );
        DIG_Add_i4 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s10,
                b => s12,
                c_i => '0',
                c_o => s19,
                s => s18
                );
        DIG_Add_i5 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s14,
                b => s16,
                c_i => '0',
                c_o => s23,
                s => s22
                );
        DIG_Add_i6 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s11,
                b => s13,
                c_i => s19,
                c_o => s21,
                s => s20
                );
        DIG_Add_i7 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s15,
                b => s17,
                c_i => s23,
                c_o => s25,
                s => s24
                );
        DIG_Add_i8 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s18,
                b => s22,
                c_i => '0',
                c_o => s26,
                s => s31
                );
        DIG_Add_i9 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s20,
                b => s24,
                c_i => s26,
                c_o => s28,
                s => s27
                );
        DIG_Add_i10 : DIG_Add
            generic map (
                Bits => 1 
                )
            port map (
                a => s21,
                b => s25,
                c_i => s28,
                c_o => s30,
                s => s29
                );
        Valid_temp <= ( (  not s31 )  and ( (  not s27 )  and (  not s29 )  )  ) ;
        \1E_temp  <= ( ( (  not s30 )  and ( s27 and s31 )  )  or ( (  not s30 )  and ( (  not s29 )  and s31 )  )  ) ;
        \m'3  <= ( s29 or s30 ) ;
        \2E  <= ( (  not \1E_temp  )  and (  not Valid_temp )  ) ;
        \m'0  <= \m'0_temp ;
        \m'1  <= \m'1_temp ;
        \m'2  <= \m'2_temp ;
        Valid <= Valid_temp;
        \1E  <= \1E_temp ;
    end; 


