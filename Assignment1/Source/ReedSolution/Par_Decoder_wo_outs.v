/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mo (
  input Hi,
  input Gi,
  input Fi,
  input Di,
  input Ci,
  input Ei,
  input Bi,
  input Ai,
  output Mo
);
  assign Mo = (((Hi ^ Gi) & (Di ^ Ci)) | ((Fi ^ Ei) & (Bi ^ Ai)));
endmodule

module \3_input_decoder  (
  input y7,
  input y6,
  input y5,
  input y4,
  input y3,
  input y2,
  input y1,
  input y0,
  output m0_2,
  output m0_1,
  output m0_0
);
  Mo Mo_i0 (
    .Hi( y7 ),
    .Gi( y6 ),
    .Fi( y5 ),
    .Di( y3 ),
    .Ci( y2 ),
    .Ei( y4 ),
    .Bi( y1 ),
    .Ai( y0 ),
    .Mo( m0_0 )
  );
  Mo Mo_i1 (
    .Hi( y7 ),
    .Gi( y5 ),
    .Fi( y6 ),
    .Di( y3 ),
    .Ci( y1 ),
    .Ei( y4 ),
    .Bi( y2 ),
    .Ai( y0 ),
    .Mo( m0_1 )
  );
  Mo Mo_i2 (
    .Hi( y7 ),
    .Gi( y3 ),
    .Fi( y6 ),
    .Di( y5 ),
    .Ci( y1 ),
    .Ei( y2 ),
    .Bi( y4 ),
    .Ai( y0 ),
    .Mo( m0_2 )
  );
endmodule

module Reed_decoder (
  input y7,
  input y6,
  input y5,
  input y4,
  input y3,
  input y2,
  input y1,
  input y0,
  input m2,
  input m1,
  input m0,
  output m3_7,
  output m3_6,
  output m3_5,
  output m3_4,
  output m3_3,
  output m3_2,
  output m3_1,
  output m3_0
);
  wire s0;
  wire s1;
  wire s2;
  assign s0 = (1'b1 & m0);
  assign s1 = (1'b1 & m1);
  assign s2 = (1'b1 & m2);
  assign m3_1 = (y1 ^ s0);
  assign m3_3 = ((y3 ^ s0) ^ s1);
  assign m3_2 = (y2 ^ s1);
  assign m3_5 = ((y5 ^ s0) ^ s2);
  assign m3_4 = (y4 ^ s2);
  assign m3_6 = ((y6 ^ s1) ^ s2);
  assign m3_7 = (((y7 ^ s0) ^ s1) ^ s2);
  assign m3_0 = y0;
endmodule
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module Full_Adder_4Bit_woci (
  input a_0,
  input b_0,
  input a_1,
  input b_1,
  output s_0,
  output s_1,
  output Co
);
  wire s0;
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i0 (
    .a( a_0 ),
    .b( b_0 ),
    .c_i( 1'b0 ),
    .s( s_0 ),
    .c_o( s0 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i1 (
    .a( a_1 ),
    .b( b_1 ),
    .c_i( s0 ),
    .s( s_1 ),
    .c_o( Co )
  );
endmodule

module Full_Adder_6Bit (
  input a_0,
  input b_0,
  input a_1,
  input b_1,
  input a_2,
  input b_2,
  output s_0,
  output s_1,
  output s_2,
  output Co
);
  wire s0;
  wire s1;
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i0 (
    .a( a_0 ),
    .b( b_0 ),
    .c_i( 1'b0 ),
    .s( s_0 ),
    .c_o( s0 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i1 (
    .a( a_1 ),
    .b( b_1 ),
    .c_i( s0 ),
    .s( s_1 ),
    .c_o( s1 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i2 (
    .a( a_2 ),
    .b( b_2 ),
    .c_i( s1 ),
    .s( s_2 ),
    .c_o( Co )
  );
endmodule

module Mayority_voter (
  input m3_0,
  input m3_1,
  input m3_2,
  input m3_3,
  input m3_5,
  input m3_4,
  input m3_7,
  input m3_6,
  output m3_d,
  output m3_c,
  output m3_b,
  output m3_a,
  output m0_3
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire m3_b_temp;
  wire m3_a_temp;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i0 (
    .a( m3_7 ),
    .b( 1'b0 ),
    .c_i( m3_6 ),
    .s( s0 ),
    .c_o( s1 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i1 (
    .a( m3_5 ),
    .b( 1'b0 ),
    .c_i( m3_4 ),
    .s( s2 ),
    .c_o( s3 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i2 (
    .a( m3_3 ),
    .b( 1'b0 ),
    .c_i( m3_2 ),
    .s( s4 ),
    .c_o( s5 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i3 (
    .a( m3_1 ),
    .b( 1'b0 ),
    .c_i( m3_0 ),
    .s( s6 ),
    .c_o( s7 )
  );
  Full_Adder_4Bit_woci Full_Adder_4Bit_woci_i4 (
    .a_0( s0 ),
    .b_0( s2 ),
    .a_1( s1 ),
    .b_1( s3 ),
    .s_0( s8 ),
    .s_1( s10 ),
    .Co( s12 )
  );
  Full_Adder_4Bit_woci Full_Adder_4Bit_woci_i5 (
    .a_0( s4 ),
    .b_0( s6 ),
    .a_1( s5 ),
    .b_1( s7 ),
    .s_0( s9 ),
    .s_1( s11 ),
    .Co( s13 )
  );
  Full_Adder_6Bit Full_Adder_6Bit_i6 (
    .a_0( s8 ),
    .b_0( s9 ),
    .a_1( s10 ),
    .b_1( s11 ),
    .a_2( s12 ),
    .b_2( s13 ),
    .s_0( m3_d ),
    .s_1( m3_c ),
    .s_2( m3_b_temp ),
    .Co( m3_a_temp )
  );
  assign m0_3 = (m3_b_temp | m3_a_temp);
  assign m3_b = m3_b_temp;
  assign m3_a = m3_a_temp;
endmodule

module Validit_error_display (
  input m3_d,
  input m3_c,
  input m3_b,
  input m3_a,
  output \2_Errors ,
  output \1_Error ,
  output \Valid_(No_Errors) 
);
  wire \Valid_(No_Errors)_temp ;
  wire \1_Error_temp ;
  assign \Valid_(No_Errors)_temp  = (~ m3_d & (~ m3_c & ~ m3_b));
  assign \1_Error_temp  = ((~ m3_a & (m3_c & m3_d)) | (~ m3_a & (~ m3_b & m3_d)));
  assign \2_Errors  = (~ \1_Error_temp  & ~ \Valid_(No_Errors)_temp );
  assign \1_Error  = \1_Error_temp ;
  assign \Valid_(No_Errors)  = \Valid_(No_Errors)_temp ;
endmodule

module Par_Decoder_wo_outs (
  input y7,
  input y6,
  input y5,
  input y4,
  input y3,
  input y2,
  input y1,
  input y0,
  output m0,
  output m1,
  output m2,
  output m3,
  output Valid,
  output E1,
  output E2
);
  wire m2_temp;
  wire m1_temp;
  wire m0_temp;
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  \3_input_decoder  \3_input_decoder_i0 (
    .y7( y7 ),
    .y6( y6 ),
    .y5( y5 ),
    .y4( y4 ),
    .y3( y3 ),
    .y2( y2 ),
    .y1( y1 ),
    .y0( y0 ),
    .m0_2( m2_temp ),
    .m0_1( m1_temp ),
    .m0_0( m0_temp )
  );
  Reed_decoder Reed_decoder_i1 (
    .y7( y7 ),
    .y6( y6 ),
    .y5( y5 ),
    .y4( y4 ),
    .y3( y3 ),
    .y2( y2 ),
    .y1( y1 ),
    .y0( y0 ),
    .m2( m2_temp ),
    .m1( m1_temp ),
    .m0( m0_temp ),
    .m3_7( s0 ),
    .m3_6( s1 ),
    .m3_5( s2 ),
    .m3_4( s3 ),
    .m3_3( s4 ),
    .m3_2( s5 ),
    .m3_1( s6 ),
    .m3_0( s7 )
  );
  Mayority_voter Mayority_voter_i2 (
    .m3_0( s7 ),
    .m3_1( s6 ),
    .m3_2( s5 ),
    .m3_3( s4 ),
    .m3_5( s2 ),
    .m3_4( s3 ),
    .m3_7( s0 ),
    .m3_6( s1 ),
    .m3_d( s8 ),
    .m3_c( s9 ),
    .m3_b( s10 ),
    .m3_a( s11 ),
    .m0_3( m3 )
  );
  Validit_error_display Validit_error_display_i3 (
    .m3_d( s8 ),
    .m3_c( s9 ),
    .m3_b( s10 ),
    .m3_a( s11 ),
    .\2_Errors ( E1 ),
    .\1_Error ( E2 ),
    .\Valid_(No_Errors) ( Valid )
  );
  assign m0 = m0_temp;
  assign m1 = m1_temp;
  assign m2 = m2_temp;
endmodule
