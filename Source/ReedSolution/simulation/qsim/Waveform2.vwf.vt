// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2022 13:08:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DecoderSimp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DecoderSimp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg y0;
reg y1;
reg y2;
reg y3;
reg y4;
reg y5;
reg y6;
reg y7;
// wires                                               
wire 1E;
wire 2E;
wire Valid;
wire m'0;
wire m'1;
wire m'2;
wire m'3;

// assign statements (if any)                          
DecoderSimp i1 (
// port map - connection between master ports and signals/registers   
	.\1E (1E),
	.\2E (2E),
	.Valid(Valid),
	.\m'0 (m'0),
	.\m'1 (m'1),
	.\m'2 (m'2),
	.\m'3 (m'3),
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4),
	.y5(y5),
	.y6(y6),
	.y7(y7)
);
initial 
begin 
#100000 $finish;
end 

// y0
initial
begin
	y0 = 1'b1;
end 

// y1
initial
begin
	y1 = 1'b1;
end 

// y2
initial
begin
	y2 = 1'b1;
end 

// y3
initial
begin
	y3 = 1'b1;
end 

// y4
initial
begin
	y4 = 1'b1;
end 

// y5
initial
begin
	y5 = 1'b1;
end 

// y6
initial
begin
	y6 = 1'b1;
end 

// y7
initial
begin
	y7 = 1'b1;
end 
endmodule

